//AbstractFactory（一般のポインタ使用）
//オブジェクト生成を、生成工場となる関数で行う
//部品となるクラスの生成が、ソースコードの中に散在しなくなるため、変更が容易になる
//また、生成の際に、他の処理を行わせることも容易になる（他のメソッドを呼び出して処理することも可能）
//
//【重要ポイント】
//同じ「タイヤ」であっても違いがあるが、その違いは、部品を作成する工場の違いによって生まれると考えるので、
//部品の内部的な違いを、外部から気にかける必要がなくなる
//一度オブジェクト生成工場を作ってしまえば、後は全ての操作がインタフェースクラス経由で行われる点が利点
//結果的にどんな部品が作られようとも、同じ操作ができる
//また、１つの工場で作成される部品のセットは、常に同じものなので、複数の部品を常に正しい組み合わせで生成できる
//
//【問題点】
//部品が増えると、ほとんど全ての箇所で追加作業が必要になってしまう
//後から部品を追加することは容易ではない
//abstractFactory01(normal).cpp
//結果
//生成工場Ａ
//スリックタイヤ（レーシング用）
//ハイオク
//生成工場Ｂ
//スタッドレスタイヤ（寒冷地用）
//ＬＰガス

#include <iostream>
#include <string>
using namespace std;

//タイヤクラス----------------------------------------------------------
//タイヤには、スリックタイヤとスタッドレスタイヤがある
///////////////////////////////////////////////////////////////////
//タイヤinterfaceクラス定義
class ITire
{
public:
	virtual ~ITire(){}
};
//----------------------------------------------------------------
//スリックタイヤクラス定義
class CTire1 : public ITire
{
public:
	CTire1(){ cout << "スリックタイヤ（レーシング用）" << endl; }
};
//----------------------------------------------------------------
//スタッドレスタイヤクラス定義
class CTire2 : public ITire
{
public:
	CTire2(){ cout << "スタッドレスタイヤ（寒冷地用）" << endl; }
};
//--------------------------------------------------------------------

//燃料クラス----------------------------------------------------------
//燃料には、ガソリンとＬＰガスがある
///////////////////////////////////////////////////////////////////
//燃料interfaceクラス定義
class IFuel
{
public:
	virtual ~IFuel(){}
};
//----------------------------------------------------------------
//ハイオククラス定義
class CFuel1 : public IFuel
{
public:
	CFuel1(){ cout << "ハイオク" << endl; }
};
//----------------------------------------------------------------
//ＬＰガスクラス定義
class CFuel2 : public IFuel
{
public:
	CFuel2(){ cout << "ＬＰガス" << endl; }
};
//--------------------------------------------------------------------

//オブジェクト生成工場クラス------------------------------------------
//生成工場Ａ、Ｂとも、１つの工場でタイヤと燃料を生成
///////////////////////////////////////////////////////////////////
//生成工場interfaceクラス定義（抽象interfaceクラス）
class IFactory{
public:
	virtual ITire* CreateTire() = 0;
	virtual IFuel* CreateFuel() = 0;
	virtual ~IFactory(){}
};
//----------------------------------------------------------------
//生成工場Ａクラス定義
//スリックタイヤとハイオクを生成
class CFactoryA : public IFactory{
public:
	ITire* CreateTire(){ return new CTire1(); }		//スリックタイヤ
	IFuel* CreateFuel(){ return new CFuel1(); }		//ハイオク
};
//----------------------------------------------------------------
//生成工場Ｂクラス定義
//スタッドレスタイヤとＬＰガスを生成
class CFactoryB : public IFactory{
public:
	ITire* CreateTire(){ return new CTire2(); }		//スタッドレスタイヤ
	IFuel* CreateFuel(){ return new CFuel2(); }		//ＬＰガス
};
//--------------------------------------------------------------------

///////////////////////////////////////////////////////////////////
int main()
{
	IFactory* factoryP;					//オブジェクト生成工場管理用ポインタ
	ITire* tireP;						//タイヤ管理用ポインタ
	IFuel* fuelP;						//燃料管理用ポインタ

	//生成工場Ａ
	cout << "生成工場Ａ" << endl;
	factoryP = new CFactoryA();			//工場Ａ生成
	tireP = factoryP->CreateTire();		//タイヤ生成
	fuelP = factoryP->CreateFuel();		//燃料生成

	delete fuelP;
	delete tireP;
	delete factoryP;

	//----------------------------------------------------------
	//生成工場Ｂ
	cout << "生成工場Ｂ" << endl;
	factoryP = new CFactoryB();			//工場Ｂ生成
	tireP = factoryP->CreateTire();		//タイヤ生成
	fuelP = factoryP->CreateFuel();		//燃料生成

	delete fuelP;
	delete tireP;
	delete factoryP;

	return 0;
}
